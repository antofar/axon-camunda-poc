buildscript {

    ext.kotlinVersion               = '1.2.30'
    ext.jacksonModuleKotlinVersion  = '2.9.4.1'

    ext.springBootVersion           = '1.5.10.RELEASE'
    ext.axonVersion                 = '3.1.2'
    ext.camundaVersion              = '7.8.0'
    ext.camundaSpringBootVersion    = '2.3.0'
    ext.h2Version                   = '1.4.196'
    ext.log4jVersion                = '2.10.0'

    ext.junit4Version               = '4.12'

    repositories {
        mavenCentral()
        maven { url("https://repo.spring.io/milestone") }
    }

    dependencies {

        // Kotlin
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"

        // Spring
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")

    }

}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: "kotlin-spring"
apply plugin: "kotlin-noarg"
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'

repositories {
    mavenCentral()
    maven { url("https://repo.spring.io/milestone") }
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
compileKotlin.kotlinOptions.jvmTarget = "1.8"
compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

dependencyManagement {
    imports {
        mavenBom "org.camunda.bpm:camunda-bom:${camundaVersion}"
    }
}

dependencies {

    // Kotlin
    compile     ("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleKotlinVersion}")
    compile     ("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")

    // Spring
    compile     ("org.springframework.boot:spring-boot-starter-web")
    compile     ("org.springframework.boot:spring-boot-starter-actuator")
    compile     ("org.springframework.boot:spring-boot-starter-data-jpa")
    testCompile ("org.springframework.boot:spring-boot-starter-test")

    // Axon
    compile     ("org.axonframework:axon-spring-boot-starter:${axonVersion}")
    testCompile ("org.axonframework:axon-test:${axonVersion}")

    // Camunda
    compile     ("org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:${camundaSpringBootVersion}")
    compile     ("org.camunda.spin:camunda-spin-core")
    compile     ("org.camunda.spin:camunda-spin-dataformat-all")
    compile     ("org.camunda.bpm:camunda-engine-plugin-spin")

    // H2
    compile     ("com.h2database:h2:${h2Version}")

    // Log4J
    testRuntime ("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    testRuntime ("org.apache.logging.log4j:log4j-jul:${log4jVersion}")

    // JUnit
    testCompile ("junit:junit:${junit4Version}")

}

noArg {
    annotation("javax.persistence.Entity")
}

test {
    useJUnit {
        includeCategories 'com.plexiti.generics.UnitTest'
    }
}

task integration(type: Test) {
    useJUnit {
        includeCategories 'com.plexiti.generics.IntegrationTest'
    }
}
